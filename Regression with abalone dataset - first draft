{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":72489,"databundleVersionId":8096274,"sourceType":"competition"},{"sourceId":57419,"sourceType":"datasetVersion","datasetId":37691},{"sourceId":8038942,"sourceType":"datasetVersion","datasetId":4705962}],"dockerImageVersionId":30684,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.ensemble import GradientBoostingRegressor, RandomForestRegressor, ExtraTreesRegressor\nfrom sklearn.preprocessing import OneHotEncoder, LabelEncoder, StandardScaler\nfrom sklearn.metrics import mean_squared_error, make_scorer,r2_score, mean_absolute_error, mean_squared_log_error\nfrom sklearn.model_selection import cross_val_score, train_test_split, StratifiedKFold, KFold\nfrom xgboost import XGBRegressor, cv\nfrom catboost import CatBoostRegressor, Pool\nfrom lightgbm import LGBMRegressor, log_evaluation, early_stopping\nimport optuna\nfrom sklearn.ensemble import VotingRegressor\nfrom tqdm.notebook import tqdm\nfrom functools import partial\nfrom IPython.display import clear_output","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-04-17T13:29:32.342365Z","iopub.execute_input":"2024-04-17T13:29:32.343356Z","iopub.status.idle":"2024-04-17T13:29:36.780994Z","shell.execute_reply.started":"2024-04-17T13:29:32.343318Z","shell.execute_reply":"2024-04-17T13:29:36.779866Z"},"trusted":true},"execution_count":1,"outputs":[]},{"cell_type":"code","source":"train = pd.read_csv('/kaggle/input/playground-series-s4e4/train.csv')\ntest = pd.read_csv('/kaggle/input/playground-series-s4e4/test.csv')\nsubmission = pd.read_csv('/kaggle/input/playground-series-s4e4/sample_submission.csv')\ntrain_org = pd.read_csv('/kaggle/input/abalone-dataset/abalone.csv')\n","metadata":{"execution":{"iopub.status.busy":"2024-04-17T13:29:39.441973Z","iopub.execute_input":"2024-04-17T13:29:39.442587Z","iopub.status.idle":"2024-04-17T13:29:39.734664Z","shell.execute_reply.started":"2024-04-17T13:29:39.442554Z","shell.execute_reply":"2024-04-17T13:29:39.733488Z"},"trusted":true},"execution_count":2,"outputs":[]},{"cell_type":"code","source":"train_org = train_org.rename(columns={'Shucked weight': 'Whole weight.1',\n                                      'Viscera weight': 'Whole weight.2'})\n\ntrain = pd.concat([train, train_org]).drop(['id'], axis=1).drop_duplicates()\ntest = test.drop(['id'], axis=1)","metadata":{"execution":{"iopub.status.busy":"2024-04-17T13:29:39.736564Z","iopub.execute_input":"2024-04-17T13:29:39.736960Z","iopub.status.idle":"2024-04-17T13:29:39.809563Z","shell.execute_reply.started":"2024-04-17T13:29:39.736924Z","shell.execute_reply":"2024-04-17T13:29:39.808381Z"},"trusted":true},"execution_count":3,"outputs":[]},{"cell_type":"code","source":"train.info()","metadata":{"execution":{"iopub.status.busy":"2024-04-17T13:29:39.889716Z","iopub.execute_input":"2024-04-17T13:29:39.890086Z","iopub.status.idle":"2024-04-17T13:29:39.916157Z","shell.execute_reply.started":"2024-04-17T13:29:39.890060Z","shell.execute_reply":"2024-04-17T13:29:39.914653Z"},"trusted":true},"execution_count":4,"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nIndex: 94792 entries, 0 to 4176\nData columns (total 9 columns):\n #   Column          Non-Null Count  Dtype  \n---  ------          --------------  -----  \n 0   Sex             94792 non-null  object \n 1   Length          94792 non-null  float64\n 2   Diameter        94792 non-null  float64\n 3   Height          94792 non-null  float64\n 4   Whole weight    94792 non-null  float64\n 5   Whole weight.1  94792 non-null  float64\n 6   Whole weight.2  94792 non-null  float64\n 7   Shell weight    94792 non-null  float64\n 8   Rings           94792 non-null  int64  \ndtypes: float64(7), int64(1), object(1)\nmemory usage: 7.2+ MB\n","output_type":"stream"}]},{"cell_type":"code","source":"train.describe().drop(index='count', columns='Rings').T.style.background_gradient(cmap = 'BuGn')","metadata":{"execution":{"iopub.status.busy":"2024-04-17T13:29:40.171861Z","iopub.execute_input":"2024-04-17T13:29:40.172217Z","iopub.status.idle":"2024-04-17T13:29:40.293556Z","shell.execute_reply.started":"2024-04-17T13:29:40.172192Z","shell.execute_reply":"2024-04-17T13:29:40.292504Z"},"trusted":true},"execution_count":5,"outputs":[{"execution_count":5,"output_type":"execute_result","data":{"text/plain":"<pandas.io.formats.style.Styler at 0x7a50deb63b20>","text/html":"<style type=\"text/css\">\n#T_fa412_row0_col0 {\n  background-color: #4db585;\n  color: #f1f1f1;\n}\n#T_fa412_row0_col1 {\n  background-color: #d8f0ef;\n  color: #000000;\n}\n#T_fa412_row0_col2, #T_fa412_row0_col3, #T_fa412_row3_col0, #T_fa412_row3_col1, #T_fa412_row3_col4, #T_fa412_row3_col5, #T_fa412_row3_col6 {\n  background-color: #00441b;\n  color: #f1f1f1;\n}\n#T_fa412_row0_col4 {\n  background-color: #44af79;\n  color: #f1f1f1;\n}\n#T_fa412_row0_col5 {\n  background-color: #6dc5a9;\n  color: #000000;\n}\n#T_fa412_row0_col6 {\n  background-color: #ecf8fb;\n  color: #000000;\n}\n#T_fa412_row1_col0 {\n  background-color: #8cd2bf;\n  color: #000000;\n}\n#T_fa412_row1_col1 {\n  background-color: #e2f4f7;\n  color: #000000;\n}\n#T_fa412_row1_col2 {\n  background-color: #27904c;\n  color: #f1f1f1;\n}\n#T_fa412_row1_col3 {\n  background-color: #2a9350;\n  color: #f1f1f1;\n}\n#T_fa412_row1_col4 {\n  background-color: #82ceb8;\n  color: #000000;\n}\n#T_fa412_row1_col5 {\n  background-color: #a8ded2;\n  color: #000000;\n}\n#T_fa412_row1_col6, #T_fa412_row2_col0, #T_fa412_row2_col1, #T_fa412_row2_col2, #T_fa412_row2_col4, #T_fa412_row2_col5, #T_fa412_row5_col3 {\n  background-color: #f7fcfd;\n  color: #000000;\n}\n#T_fa412_row2_col3 {\n  background-color: #eef8fb;\n  color: #000000;\n}\n#T_fa412_row2_col6, #T_fa412_row6_col1 {\n  background-color: #d2eeeb;\n  color: #000000;\n}\n#T_fa412_row3_col2, #T_fa412_row6_col2 {\n  background-color: #f4fbfc;\n  color: #000000;\n}\n#T_fa412_row3_col3 {\n  background-color: #005b25;\n  color: #f1f1f1;\n}\n#T_fa412_row4_col0 {\n  background-color: #b2e2d7;\n  color: #000000;\n}\n#T_fa412_row4_col1 {\n  background-color: #90d4c3;\n  color: #000000;\n}\n#T_fa412_row4_col2 {\n  background-color: #f5fbfd;\n  color: #000000;\n}\n#T_fa412_row4_col3 {\n  background-color: #ccece6;\n  color: #000000;\n}\n#T_fa412_row4_col4 {\n  background-color: #bde6de;\n  color: #000000;\n}\n#T_fa412_row4_col5 {\n  background-color: #aadfd3;\n  color: #000000;\n}\n#T_fa412_row4_col6 {\n  background-color: #95d6c6;\n  color: #000000;\n}\n#T_fa412_row5_col0, #T_fa412_row5_col6 {\n  background-color: #f0f9fb;\n  color: #000000;\n}\n#T_fa412_row5_col1 {\n  background-color: #e0f3f5;\n  color: #000000;\n}\n#T_fa412_row5_col2 {\n  background-color: #f6fcfd;\n  color: #000000;\n}\n#T_fa412_row5_col4 {\n  background-color: #f1fafc;\n  color: #000000;\n}\n#T_fa412_row5_col5 {\n  background-color: #ecf8fa;\n  color: #000000;\n}\n#T_fa412_row6_col0 {\n  background-color: #e3f4f7;\n  color: #000000;\n}\n#T_fa412_row6_col3 {\n  background-color: #eaf7fa;\n  color: #000000;\n}\n#T_fa412_row6_col4 {\n  background-color: #e5f5f9;\n  color: #000000;\n}\n#T_fa412_row6_col5 {\n  background-color: #dff3f4;\n  color: #000000;\n}\n#T_fa412_row6_col6 {\n  background-color: #def2f4;\n  color: #000000;\n}\n</style>\n<table id=\"T_fa412\">\n  <thead>\n    <tr>\n      <th class=\"blank level0\" >&nbsp;</th>\n      <th id=\"T_fa412_level0_col0\" class=\"col_heading level0 col0\" >mean</th>\n      <th id=\"T_fa412_level0_col1\" class=\"col_heading level0 col1\" >std</th>\n      <th id=\"T_fa412_level0_col2\" class=\"col_heading level0 col2\" >min</th>\n      <th id=\"T_fa412_level0_col3\" class=\"col_heading level0 col3\" >25%</th>\n      <th id=\"T_fa412_level0_col4\" class=\"col_heading level0 col4\" >50%</th>\n      <th id=\"T_fa412_level0_col5\" class=\"col_heading level0 col5\" >75%</th>\n      <th id=\"T_fa412_level0_col6\" class=\"col_heading level0 col6\" >max</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th id=\"T_fa412_level0_row0\" class=\"row_heading level0 row0\" >Length</th>\n      <td id=\"T_fa412_row0_col0\" class=\"data row0 col0\" >0.517402</td>\n      <td id=\"T_fa412_row0_col1\" class=\"data row0 col1\" >0.118308</td>\n      <td id=\"T_fa412_row0_col2\" class=\"data row0 col2\" >0.075000</td>\n      <td id=\"T_fa412_row0_col3\" class=\"data row0 col3\" >0.445000</td>\n      <td id=\"T_fa412_row0_col4\" class=\"data row0 col4\" >0.545000</td>\n      <td id=\"T_fa412_row0_col5\" class=\"data row0 col5\" >0.600000</td>\n      <td id=\"T_fa412_row0_col6\" class=\"data row0 col6\" >0.815000</td>\n    </tr>\n    <tr>\n      <th id=\"T_fa412_level0_row1\" class=\"row_heading level0 row1\" >Diameter</th>\n      <td id=\"T_fa412_row1_col0\" class=\"data row1 col0\" >0.401952</td>\n      <td id=\"T_fa412_row1_col1\" class=\"data row1 col1\" >0.098088</td>\n      <td id=\"T_fa412_row1_col2\" class=\"data row1 col2\" >0.055000</td>\n      <td id=\"T_fa412_row1_col3\" class=\"data row1 col3\" >0.345000</td>\n      <td id=\"T_fa412_row1_col4\" class=\"data row1 col4\" >0.425000</td>\n      <td id=\"T_fa412_row1_col5\" class=\"data row1 col5\" >0.470000</td>\n      <td id=\"T_fa412_row1_col6\" class=\"data row1 col6\" >0.650000</td>\n    </tr>\n    <tr>\n      <th id=\"T_fa412_level0_row2\" class=\"row_heading level0 row2\" >Height</th>\n      <td id=\"T_fa412_row2_col0\" class=\"data row2 col0\" >0.135643</td>\n      <td id=\"T_fa412_row2_col1\" class=\"data row2 col1\" >0.038193</td>\n      <td id=\"T_fa412_row2_col2\" class=\"data row2 col2\" >0.000000</td>\n      <td id=\"T_fa412_row2_col3\" class=\"data row2 col3\" >0.110000</td>\n      <td id=\"T_fa412_row2_col4\" class=\"data row2 col4\" >0.140000</td>\n      <td id=\"T_fa412_row2_col5\" class=\"data row2 col5\" >0.160000</td>\n      <td id=\"T_fa412_row2_col6\" class=\"data row2 col6\" >1.130000</td>\n    </tr>\n    <tr>\n      <th id=\"T_fa412_level0_row3\" class=\"row_heading level0 row3\" >Whole weight</th>\n      <td id=\"T_fa412_row3_col0\" class=\"data row3 col0\" >0.790785</td>\n      <td id=\"T_fa412_row3_col1\" class=\"data row3 col1\" >0.459231</td>\n      <td id=\"T_fa412_row3_col2\" class=\"data row3 col2\" >0.002000</td>\n      <td id=\"T_fa412_row3_col3\" class=\"data row3 col3\" >0.419500</td>\n      <td id=\"T_fa412_row3_col4\" class=\"data row3 col4\" >0.799500</td>\n      <td id=\"T_fa412_row3_col5\" class=\"data row3 col5\" >1.072500</td>\n      <td id=\"T_fa412_row3_col6\" class=\"data row3 col6\" >2.825500</td>\n    </tr>\n    <tr>\n      <th id=\"T_fa412_level0_row4\" class=\"row_heading level0 row4\" >Whole weight.1</th>\n      <td id=\"T_fa412_row4_col0\" class=\"data row4 col0\" >0.341597</td>\n      <td id=\"T_fa412_row4_col1\" class=\"data row4 col1\" >0.205267</td>\n      <td id=\"T_fa412_row4_col2\" class=\"data row4 col2\" >0.001000</td>\n      <td id=\"T_fa412_row4_col3\" class=\"data row4 col3\" >0.177500</td>\n      <td id=\"T_fa412_row4_col4\" class=\"data row4 col4\" >0.330000</td>\n      <td id=\"T_fa412_row4_col5\" class=\"data row4 col5\" >0.464500</td>\n      <td id=\"T_fa412_row4_col6\" class=\"data row4 col6\" >1.488000</td>\n    </tr>\n    <tr>\n      <th id=\"T_fa412_level0_row5\" class=\"row_heading level0 row5\" >Whole weight.2</th>\n      <td id=\"T_fa412_row5_col0\" class=\"data row5 col0\" >0.169914</td>\n      <td id=\"T_fa412_row5_col1\" class=\"data row5 col1\" >0.101334</td>\n      <td id=\"T_fa412_row5_col2\" class=\"data row5 col2\" >0.000500</td>\n      <td id=\"T_fa412_row5_col3\" class=\"data row5 col3\" >0.086500</td>\n      <td id=\"T_fa412_row5_col4\" class=\"data row5 col4\" >0.166000</td>\n      <td id=\"T_fa412_row5_col5\" class=\"data row5 col5\" >0.233000</td>\n      <td id=\"T_fa412_row5_col6\" class=\"data row5 col6\" >0.760000</td>\n    </tr>\n    <tr>\n      <th id=\"T_fa412_level0_row6\" class=\"row_heading level0 row6\" >Shell weight</th>\n      <td id=\"T_fa412_row6_col0\" class=\"data row6 col0\" >0.226468</td>\n      <td id=\"T_fa412_row6_col1\" class=\"data row6 col1\" >0.130639</td>\n      <td id=\"T_fa412_row6_col2\" class=\"data row6 col2\" >0.001500</td>\n      <td id=\"T_fa412_row6_col3\" class=\"data row6 col3\" >0.120000</td>\n      <td id=\"T_fa412_row6_col4\" class=\"data row6 col4\" >0.225000</td>\n      <td id=\"T_fa412_row6_col5\" class=\"data row6 col5\" >0.305000</td>\n      <td id=\"T_fa412_row6_col6\" class=\"data row6 col6\" >1.005000</td>\n    </tr>\n  </tbody>\n</table>\n"},"metadata":{}}]},{"cell_type":"code","source":"plt.figure(figsize=(6,6))\ncorr = train.select_dtypes(exclude='object').corr(method='pearson')\nsns.heatmap(corr, fmt = '0.2f', cmap = 'RdYlGn', annot=True, cbar=False)\nplt.show()\n","metadata":{"execution":{"iopub.status.busy":"2024-04-17T13:29:40.410955Z","iopub.execute_input":"2024-04-17T13:29:40.411433Z","iopub.status.idle":"2024-04-17T13:29:40.815921Z","shell.execute_reply.started":"2024-04-17T13:29:40.411393Z","shell.execute_reply":"2024-04-17T13:29:40.815039Z"},"trusted":true},"execution_count":6,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 600x600 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"train_raw = train.drop(['Sex'], axis=1)\nnum_features = train.select_dtypes(exclude=['object', 'int64']).columns.tolist()\n\ntrain[num_features] = np.log1p(train[num_features])\ntrain.Rings = np.log1p(train.Rings)\n\ntest[num_features] = np.log1p(test[num_features])\n","metadata":{"execution":{"iopub.status.busy":"2024-04-17T13:29:40.817314Z","iopub.execute_input":"2024-04-17T13:29:40.817637Z","iopub.status.idle":"2024-04-17T13:29:40.866154Z","shell.execute_reply.started":"2024-04-17T13:29:40.817611Z","shell.execute_reply":"2024-04-17T13:29:40.865297Z"},"trusted":true},"execution_count":7,"outputs":[]},{"cell_type":"code","source":"fig, axes = plt.subplots(nrows=8, ncols=2, figsize=(15, 40))\n\nfor (ax_r, ax_n), col_r, col_n, title in zip(axes, train_raw.T.values, train.drop(['Sex'], axis=1).T.values, num_features + ['Rings']):\n\n    ax_r.set_title(f'{title} ($\\mu=$ {col_r.mean():.2f} and $\\sigma=$ {col_r.std():.2f} )')\n    ax_r.hist(col_r, bins=28)\n\n    ax_n.set_title(f'{title} Normalized ($\\mu=$ {col_n.mean():.2f} and $\\sigma=$ {col_n.std():.2f} )')\n    ax_n.hist(col_n, bins=28)\n","metadata":{"execution":{"iopub.status.busy":"2024-04-17T13:29:41.054998Z","iopub.execute_input":"2024-04-17T13:29:41.056143Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"def feature_engineering(df):\n    df['height_to_whole_weight_1_ratio'] = df['Result'] = np.divide(df['Height'], df['Whole weight.1'], \n                          out=np.full_like(df['Height'], np.nan), \n                          where=(df['Whole weight.1'] != 0))\n    df['height_to_whole_weight_2_ratio'] = df['Result'] = np.divide(df['Height'], df['Whole weight.1'], \n                          out=np.full_like(df['Height'], np.nan), \n                          where=(df['Whole weight.2'] != 0))\n    return df","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"train = feature_engineering(train)\ntest = feature_engineering(test)","metadata":{"execution":{"iopub.status.busy":"2024-04-17T13:29:45.499125Z","iopub.execute_input":"2024-04-17T13:29:45.499524Z","iopub.status.idle":"2024-04-17T13:29:45.527104Z","shell.execute_reply.started":"2024-04-17T13:29:45.499496Z","shell.execute_reply":"2024-04-17T13:29:45.525558Z"},"trusted":true},"execution_count":10,"outputs":[]},{"cell_type":"code","source":"X = train.drop('Rings', axis=1)\ny = train.Rings","metadata":{"execution":{"iopub.status.busy":"2024-04-17T13:29:45.529266Z","iopub.execute_input":"2024-04-17T13:29:45.529906Z","iopub.status.idle":"2024-04-17T13:29:45.546245Z","shell.execute_reply.started":"2024-04-17T13:29:45.529872Z","shell.execute_reply":"2024-04-17T13:29:45.545101Z"},"trusted":true},"execution_count":11,"outputs":[]},{"cell_type":"code","source":"cat_features = X.select_dtypes('object').columns.to_list()\n\nX[cat_features] = X[cat_features].astype('category')\ntest[cat_features] = test[cat_features].astype('category')","metadata":{"execution":{"iopub.status.busy":"2024-04-17T13:30:20.648122Z","iopub.execute_input":"2024-04-17T13:30:20.648490Z","iopub.status.idle":"2024-04-17T13:30:20.672668Z","shell.execute_reply.started":"2024-04-17T13:30:20.648463Z","shell.execute_reply":"2024-04-17T13:30:20.671610Z"},"trusted":true},"execution_count":21,"outputs":[]},{"cell_type":"code","source":"# import category_encoders as ce\n# encoder = ce.TargetEncoder(cols=cat_features)\n# # Fit on the training set\n# X_encoded = encoder.fit_transform(X, y)\n# test_encoded = encoder.transform(test)","metadata":{"execution":{"iopub.status.busy":"2024-04-17T13:30:33.708167Z","iopub.execute_input":"2024-04-17T13:30:33.708560Z","iopub.status.idle":"2024-04-17T13:30:33.713043Z","shell.execute_reply.started":"2024-04-17T13:30:33.708533Z","shell.execute_reply":"2024-04-17T13:30:33.711927Z"},"trusted":true},"execution_count":22,"outputs":[]},{"cell_type":"code","source":"class OptunaWeights:\n \n    def _objective(self, trial, y_true, y_preds):\n        \n        if isinstance(y_preds, pd.DataFrame) or isinstance(y_preds, np.ndarray):\n            weights = [trial.suggest_float(f\"weight{n}\", 0, 1) for n in range(y_preds.shape[-1])]\n            axis = 1\n        elif isinstance(y_preds, list):\n            weights = [trial.suggest_float(f\"weight{n}\", 0, 1) for n in range(len(y_preds))]\n            axis = 0\n\n        weighted_pred  = np.average(np.array(y_preds), axis = axis, weights = weights);\n        score          = mean_squared_error(y_true, weighted_pred, squared=False);\n        return score\n\n    def fit(self, y_true, y_preds):\n        \n        optuna.logging.set_verbosity = optuna.logging.ERROR;\n        study = optuna.create_study(sampler    = optuna.samplers.TPESampler(seed = 42), \n                            pruner     = optuna.pruners.HyperbandPruner(),\n                            study_name = \"Ensemble\", \n                            direction  = 'minimize',\n                           )\n        \n        obj = partial(self._objective, y_true = y_true, y_preds = y_preds);\n        study.optimize(obj, n_trials = 200);\n               \n        if isinstance(y_preds, list):\n            self.weights = [study.best_params[f\"weight{n}\"] for n in range(len(y_preds))];\n        else:\n            self.weights = [study.best_params[f\"weight{n}\"] for n in range(y_preds.shape[-1])];\n        clear_output()\n\n    def predict(self, y_preds):\n        \n        assert self.weights is not None, 'OptunaWeights error, must be fitted before predict';\n        \n        if isinstance(y_preds, list):\n            weighted_pred = np.average(np.array(y_preds), axis=0, weights = self.weights);\n        else:\n            weighted_pred = np.average(np.array(y_preds), axis=1, weights = self.weights);\n        return weighted_pred\n\n    def fit_predict(self, y_true, y_preds):\n\n        self.fit(y_true, y_preds)\n        return self.predict(y_preds)","metadata":{"execution":{"iopub.status.busy":"2024-04-17T13:30:34.638713Z","iopub.execute_input":"2024-04-17T13:30:34.639070Z","iopub.status.idle":"2024-04-17T13:30:34.652316Z","shell.execute_reply.started":"2024-04-17T13:30:34.639043Z","shell.execute_reply":"2024-04-17T13:30:34.651166Z"},"trusted":true},"execution_count":23,"outputs":[]},{"cell_type":"code","source":"models = {\n    'XGB1': XGBRegressor(**{'grow_policy': 'lossguide', \n                            'n_estimators': 2000, \n                            'learning_rate': 0.011733966748427322, \n                            'gamma': 0.03816426816838989, \n                            'subsample': 0.486382907668344, \n                            'colsample_bytree': 0.5748511749872887, \n                            'max_depth': 10, \n                            'min_child_weight': 7, \n                            'reg_lambda': 1.7487237399420372, \n                            'reg_alpha': 0.013043045359306716,\n                            'booster': 'gbtree',\n                            'objective': 'reg:squarederror',\n                            'verbosity': 0,\n                            'tree_method': 'hist',\n                            'random_state':42,\n                            'eval_metric': \"rmse\",\n                            'early_stopping_rounds': 200,\n                            'enable_categorical': True\n                           }),\n    'XGB3': XGBRegressor(**{'booster': 'gbtree',\n                            'max_depth': 6,\n                            'n_estimators': 2000,\n                            'learning_rate': 0.017766114783902776,\n                            'min_child_weight': 17,\n                            'subsample': 0.787554747836242,\n                            'reg_alpha': 0.2737804193981823,\n                           'reg_lambda': 0.6546104880411592,\n                            'colsample_bytree': 0.7021619253205709,\n                            'random_state': 42,\n                            'objective': 'reg:squarederror',\n                            'n_jobs': -1,\n                            'eval_metric': \"rmse\",\n                            'early_stopping_rounds': 200,\n                            'enable_categorical': True,\n                            'tree_method':\"hist\"\n                           }),\n    'CAT1': CatBoostRegressor(**{'objective': 'RMSE',\n                                 'logging_level': 'Silent',\n                                 'random_seed': 42,\n                                 'learning_rate': 0.08832030459763295,\n                                 'depth': 6,\n                                 'min_data_in_leaf': 5,\n                                 'bagging_temperature': 0.01111784659471864,\n                                 'n_estimators': 2000,\n                                 'early_stopping_rounds': 200,\n                                 'eval_metric': 'RMSE',\n                                 'cat_features': cat_features,\n                                 'use_best_model': True\n                                }),\n    'CAT3': CatBoostRegressor(**{'depth': 15, \n                                 'max_bin': 464, \n                                 'logging_level': 'Silent',\n                                 'random_state': 42,\n                                 'min_data_in_leaf': 78, \n                                 'loss_function': 'RMSE', \n                                 'grow_policy': 'Lossguide', \n                                 'bootstrap_type': 'Bernoulli', \n                                 'subsample': 0.84, \n                                 'l2_leaf_reg': 8.37, \n                                 'random_strength': 3.3, \n                                 'learning_rate': 0.1,\n                                 'n_estimators': 2000,\n                                 'early_stopping_rounds': 200,\n                                 'eval_metric': 'RMSE',\n                                 'cat_features': cat_features,\n                                 'use_best_model': True\n                            }),\n    'LGBM1': LGBMRegressor(**{'objective': 'regression_l2',\n                              'metric': 'rmse',\n                              'max_depth': 6,\n                              'num_leaves': 453,\n                              'min_child_samples': 28,\n                              'learning_rate': 0.045325661331864754,\n                              'min_child_weight': 16,\n                              'colsample_bytree': 0.49208196024189055, \n                              'reg_alpha': 0.48822484657746973,\n                              'reg_lambda': 0.8129601022847696,\n                              'random_state': 42,\n                              'n_estimators': 2000,\n                              'boosting_type': 'gbdt',\n                              'verbosity': -1\n                             }),\n    'LGBM3': LGBMRegressor(**{'objective': 'regression_l2',\n                              'metric':'rmse',\n                              'verbosity':-1,\n                              'n_estimators': 2000, \n                              'learning_rate': 0.04354995869675832, \n                              'subsample': 0.719764026033712,\n                              'colsample_bytree': 0.5593947251633323, \n                              'min_data_in_leaf': 71, \n                              'lambda_l1': 0.014080963948076265, \n                              'lambda_l2': 0.04806381049807052,\n                              'max_depth': 16, \n                              'min_child_samples': 34,\n                              'random_state': 42\n                             })\n        }","metadata":{"execution":{"iopub.status.busy":"2024-04-17T13:30:36.132453Z","iopub.execute_input":"2024-04-17T13:30:36.132837Z","iopub.status.idle":"2024-04-17T13:30:36.149683Z","shell.execute_reply.started":"2024-04-17T13:30:36.132811Z","shell.execute_reply":"2024-04-17T13:30:36.148310Z"},"trusted":true},"execution_count":24,"outputs":[]},{"cell_type":"code","source":"def train(models, n_splits=10):\n    folds = KFold(n_splits=n_splits, shuffle=True, random_state=42)\n    ow = OptunaWeights()\n\n    OOF_preds = pd.DataFrame()\n    TEST_preds = pd.DataFrame()\n    scores = pd.DataFrame(columns=list(models.keys()) + ['Ensemble'])\n\n    for n_fold, (train_id, valid_id) in enumerate(folds.split(X, y)):\n\n        X_train, y_train = X.iloc[train_id], y.iloc[train_id]\n        X_val, y_val = X.iloc[valid_id], y.iloc[valid_id]\n\n        oof_preds = pd.DataFrame(columns=models, index=X_val.index)\n        test_preds = pd.DataFrame(columns=models, index=test.index)\n        print(f'Fold {n_fold+1}')\n\n        for model_name, model in tqdm(models.items()):\n            if \"XGB\" in model_name:    \n                model.fit(X_train, y_train, \n                          eval_set = [(X_val, y_val)], \n                          verbose = False\n                         ) \n\n            elif \"CAT\" in model_name:\n                model.fit(X_train, y_train, \n                          eval_set = [(X_val, y_val)], \n                          ) \n\n            elif \"LGBM\" in model_name:\n                 model.fit(X_train, y_train, \n                           eval_set = [(X_val, y_val)], \n                           callbacks = [log_evaluation(0), early_stopping(200, verbose = False)]\n                          )            \n\n            y_pred_val = model.predict(X_val)\n            oof_preds[model_name] = y_pred_val\n\n            score = mean_squared_error(y_val, y_pred_val, squared=False)\n            scores.at[n_fold, model_name] = score\n\n            test_preds[model_name] = model.predict(test)\n\n        oof_preds[\"Ensemble\"] = ow.fit_predict(y_val, oof_preds[list(models.keys())])\n        OOF_preds = pd.concat([OOF_preds, oof_preds], axis = 0, ignore_index = False)\n        test_preds[\"Ensemble\"] = ow.predict(test_preds[list(models.keys())])\n        TEST_preds = pd.concat([TEST_preds, test_preds], axis = 0, ignore_index = False)\n\n        scores.at[n_fold, 'Ensemble'] = mean_squared_error(y_val, oof_preds['Ensemble'].values, squared=False)\n\n    TEST_preds = TEST_preds[list(models.keys()) + [\"Ensemble\"]].groupby(level=0).mean()\n    \n    return OOF_preds, TEST_preds, scores, model\n","metadata":{"execution":{"iopub.status.busy":"2024-04-17T13:30:36.829945Z","iopub.execute_input":"2024-04-17T13:30:36.830662Z","iopub.status.idle":"2024-04-17T13:30:36.844679Z","shell.execute_reply.started":"2024-04-17T13:30:36.830628Z","shell.execute_reply":"2024-04-17T13:30:36.843719Z"},"trusted":true},"execution_count":25,"outputs":[]},{"cell_type":"code","source":"OOF_preds, TEST_preds, scores, model = train(models)","metadata":{"execution":{"iopub.status.busy":"2024-04-17T13:30:37.329353Z","iopub.execute_input":"2024-04-17T13:30:37.330209Z"},"trusted":true},"execution_count":null,"outputs":[{"name":"stdout","text":"Fold 2\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"  0%|          | 0/6 [00:00<?, ?it/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"75b1226efa054597a8655f9c2a23bf92"}},"metadata":{}}]},{"cell_type":"code","source":"scores.apply(pd.to_numeric).style.background_gradient(cmap=\"BuGn\")","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"plt.figure(figsize=(10,5))\nplt.plot(scores.mean())\nplt.xlabel('Models')\nplt.ylabel('Score')\nplt.grid()\nplt.show()\n","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"feature_importance = model.feature_importances_\n\nplt.figure(figsize=(6, 6))\nsns.barplot(x=pd.Series(model.feature_importances_).sort_values(ascending=False), y=X.columns, palette=\"Dark2\")\nplt.title(\"Feature Importances\")\nplt.show()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"submission.Rings = np.clip(np.expm1(TEST_preds[\"Ensemble\"].values), a_min = 1, a_max = 29)\nsubmission.to_csv(\"submission.csv\", index=False)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"plt.figure(figsize=(15, 6))\nsubmission.Rings.plot(kind=\"hist\", ec=\"black\", bins=18)\nplt.show()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}